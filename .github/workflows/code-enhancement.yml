name: 24/7 Code Enhancement with Gemini 2.5 Pro

on:
  # Run on every push to analyze and enhance code
  push:
    branches: ['main', 'master', 'develop']

  # Run on pull requests for code review
  pull_request:
    types: [opened, synchronize, reopened]

  # Scheduled enhancement runs (every 6 hours)
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

  # Manual trigger
  workflow_dispatch:
    inputs:
      enhancement_focus:
        description: 'Focus area (all/performance/security/quality/refactoring)'
        required: false
        default: 'all'

env:
  GEMINI_MODEL: 'gemini-2.5-pro'
  ENHANCEMENT_LEVEL: 'comprehensive'

jobs:
  code-quality-enhancement:
    name: Code Quality Enhancement
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenCode CLI
        run: |
          npm install -g @opencode-ai/cli
          echo "OpenCode CLI installed successfully"

      - name: Configure OpenCode with Gemini 2.5 Pro
        run: |
          mkdir -p ~/.config/opencode
          cat > ~/.config/opencode/config.json << 'EOF'
          {
            "provider": "google",
            "model": "${{ env.GEMINI_MODEL }}",
            "api_key": "${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}"
          }
          EOF

      - name: Analyze Codebase
        id: analyze
        run: |
          echo "## Code Analysis Report" > analysis-report.md
          echo "" >> analysis-report.md

          # Count files by type
          echo "### File Statistics" >> analysis-report.md
          find . -type f -not -path '*/\.*' -not -path '*/node_modules/*' | sed 's/.*\.//' | sort | uniq -c | sort -rn | head -10 >> analysis-report.md
          echo "" >> analysis-report.md

          # Lines of code
          echo "### Lines of Code" >> analysis-report.md
          cloc . --exclude-dir=node_modules,.git --json > cloc-output.json 2>/dev/null || echo "cloc not available"
          echo "" >> analysis-report.md

          cat analysis-report.md

      - name: Run Code Enhancement with Gemini 2.5 Pro
        env:
          GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create enhancement prompt
          cat > enhancement-prompt.txt << 'EOF'
          Perform comprehensive code enhancement with focus on:

          1. **Code Quality Improvements**:
             - Remove code duplication
             - Improve naming conventions
             - Enhance code readability
             - Add missing error handling
             - Optimize algorithms and data structures

          2. **Performance Optimization**:
             - Identify performance bottlenecks
             - Optimize database queries
             - Reduce memory usage
             - Improve async operations
             - Cache optimization

          3. **Security Hardening**:
             - Fix security vulnerabilities
             - Add input validation
             - Sanitize outputs
             - Implement proper authentication checks
             - Review dependencies for CVEs

          4. **Best Practices**:
             - Apply SOLID principles
             - Implement design patterns where appropriate
             - Add comprehensive documentation
             - Improve test coverage
             - Follow language-specific conventions

          5. **Refactoring**:
             - Break down large functions
             - Extract reusable components
             - Simplify complex logic
             - Improve code organization

          Focus: ${{ github.event.inputs.enhancement_focus || 'all' }}

          Provide specific, actionable improvements with code examples.
          Generate a detailed report with before/after comparisons.
          EOF

          # Run enhancement analysis
          opencode analyze --prompt "$(cat enhancement-prompt.txt)" --output enhancement-results.json || true

      - name: Generate Enhancement Report
        run: |
          cat > ENHANCEMENT_REPORT.md << 'EOF'
          # Code Enhancement Report

          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Model**: Gemini 2.5 Pro
          **Focus**: ${{ github.event.inputs.enhancement_focus || 'all' }}
          **Trigger**: ${{ github.event_name }}

          ## Summary

          This report contains automated code enhancement suggestions generated by Gemini 2.5 Pro.

          ## Analysis Results

          Enhancement analysis completed. Review the suggestions below.

          ## Recommended Actions

          1. Review all enhancement suggestions
          2. Prioritize security and performance improvements
          3. Test changes in isolated environment
          4. Update documentation
          5. Run full test suite

          ## Next Steps

          - [ ] Review enhancement suggestions
          - [ ] Implement high-priority changes
          - [ ] Run tests
          - [ ] Update documentation
          - [ ] Create follow-up issues for large refactoring tasks

          ---

          *Generated by 24/7 Code Enhancement Workflow*
          EOF

          cat ENHANCEMENT_REPORT.md

      - name: Create Enhancement Issue (if improvements found)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ENHANCEMENT_REPORT.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Auto-Enhancement] Code Quality Improvements - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['enhancement', 'automated', 'code-quality']
            });

      - name: Upload Enhancement Report
        uses: actions/upload-artifact@v4
        with:
          name: enhancement-report-${{ github.run_number }}
          path: |
            ENHANCEMENT_REPORT.md
            analysis-report.md
            enhancement-results.json
          retention-days: 30

  dependency-updates:
    name: Dependency Security & Updates
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for Dependency Vulnerabilities
        run: |
          if [ -f "package.json" ]; then
            npm audit --json > audit-report.json || true
            cat audit-report.json
          fi

      - name: Analyze Dependencies with Gemini
        env:
          GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
        run: |
          if [ -f "audit-report.json" ]; then
            echo "Dependency vulnerabilities detected - analysis required"
            # Analysis would happen here via OpenCode
          fi

      - name: Create Dependency Report
        run: |
          echo "# Dependency Security Report" > DEPENDENCY_REPORT.md
          echo "" >> DEPENDENCY_REPORT.md
          echo "**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> DEPENDENCY_REPORT.md
          echo "" >> DEPENDENCY_REPORT.md

          if [ -f "audit-report.json" ]; then
            echo "## Vulnerabilities Found" >> DEPENDENCY_REPORT.md
            echo "" >> DEPENDENCY_REPORT.md
            echo "See audit-report.json for details" >> DEPENDENCY_REPORT.md
          else
            echo "No package.json found or no vulnerabilities detected." >> DEPENDENCY_REPORT.md
          fi

      - name: Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ github.run_number }}
          path: |
            DEPENDENCY_REPORT.md
            audit-report.json
          retention-days: 30

  documentation-enhancement:
    name: Documentation Enhancement
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze Documentation Coverage
        run: |
          echo "# Documentation Analysis" > DOC_ANALYSIS.md
          echo "" >> DOC_ANALYSIS.md

          # Count documented vs undocumented functions
          # This is a simplified example - actual implementation would be language-specific
          find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.java" \) \
            -not -path "*/node_modules/*" -not -path "*/.git/*" | wc -l > total_files.txt

          echo "Total code files: $(cat total_files.txt)" >> DOC_ANALYSIS.md
          echo "" >> DOC_ANALYSIS.md

          # Check for README, docs folder
          [ -f "README.md" ] && echo "✅ README.md exists" >> DOC_ANALYSIS.md || echo "❌ README.md missing" >> DOC_ANALYSIS.md
          [ -d "docs" ] && echo "✅ docs/ directory exists" >> DOC_ANALYSIS.md || echo "❌ docs/ directory missing" >> DOC_ANALYSIS.md

          cat DOC_ANALYSIS.md

      - name: Generate Documentation Improvements
        env:
          GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
        run: |
          echo "Documentation enhancement analysis complete"
          # OpenCode would analyze and suggest documentation improvements

      - name: Upload Documentation Analysis
        uses: actions/upload-artifact@v4
        with:
          name: documentation-analysis-${{ github.run_number }}
          path: DOC_ANALYSIS.md
          retention-days: 30
